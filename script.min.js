document.addEventListener('DOMContentLoaded', function () {
    if (typeof (Storage) !== "undefined") {
        console.log("localStorage is supported.");
    } else {
        console.log("localStorage is not supported in this browser.");
    }

    let sortNewest = true; // Flag to track current sorting order

    const cities = [
        {name: 'Prague', lat: 50.0755, lon: 14.4378},
        {name: 'Brno', lat: 49.1951, lon: 16.6068},
        {name: 'Ostrava', lat: 49.8209, lon: 18.2625}
    ];

    const apiUrlTemplateCurrent = 'https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current_weather=true';

    const apiUrlTemplateHistory = (lat, lon, startDate, endDate) =>
        `https://archive-api.open-meteo.com/v1/archive?latitude=${lat}&longitude=${lon}&start_date=${startDate}&end_date=${endDate}&hourly=temperature_2m`;

    async function fetchWeather() {
        document.getElementById('weather-info').innerHTML = '';
        for (const city of cities) {
            const apiUrlCurrent = apiUrlTemplateCurrent.replace('{lat}', city.lat).replace('{lon}', city.lon);
            const currentWeatherResponse = await fetch(apiUrlCurrent);
            const currentWeatherData = await currentWeatherResponse.json();

            const endDate = new Date();
            const startDate = new Date();
            startDate.setDate(endDate.getDate() - 7);
            const formattedStartDate = startDate.toISOString().split('T')[0];
            const formattedEndDate = endDate.toISOString().split('T')[0];

            const apiUrlHistory = apiUrlTemplateHistory(city.lat, city.lon, formattedStartDate, formattedEndDate);
            const historyWeatherResponse = await fetch(apiUrlHistory);
            const historyWeatherData = await historyWeatherResponse.json();

            let weatherHTML = `
                <div class="city-weather col-md-4 text-center mb-4">
                    <h2>${city.name}</h2>
                    <p>Current Temperature: ${currentWeatherData.current_weather.temperature}°C</p>
                    <p>Historical Data (last 7 days):</p>
                    <ul>
            `;

            if (historyWeatherData.hourly && historyWeatherData.hourly.temperature_2m) {
                let hourlyData = historyWeatherData.hourly;
                if (!sortNewest) hourlyData = reverseHourlyData(hourlyData); // Reverse data if sorting by oldest date

                // Filter out null or undefined temperature data
                const validDataIndices = hourlyData.temperature_2m.reduce((acc, temp, index) => {
                    if (temp !== null && temp !== undefined) {
                        acc.push(index);
                    }
                    return acc;
                }, []);

                for (const index of validDataIndices) {
                    weatherHTML += `<li>${hourlyData.time[index]}: ${hourlyData.temperature_2m[index]}°C</li>`;
                }
            } else {
                weatherHTML += '<li>No historical data available</li>';
            }

            weatherHTML += '</ul></div>';
            document.getElementById('weather-info').innerHTML += weatherHTML;
        }
        document.getElementById('last-updated').textContent = 'Last Updated: ' + new Date().toLocaleTimeString();
    }

    function reverseHourlyData(hourlyData) {
        return {
            time: hourlyData.time.slice().reverse(),
            temperature_2m: hourlyData.temperature_2m.slice().reverse()
        };
    }

    document.getElementById('refresh-data').addEventListener('click', fetchWeather);
    document.getElementById('sort-button').addEventListener('click', function () {
        sortNewest = !sortNewest; // Toggle sorting order
        fetchWeather(); // Re-fetch data and re-render
    });

    setInterval(fetchWeather, 60000);
    fetchWeather();
});
