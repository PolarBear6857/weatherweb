document.addEventListener('DOMContentLoaded', function () {
    if (typeof (Storage) !== "undefined") {
        console.log("localStorage is supported.");
    } else {
        console.log("localStorage is not supported in this browser.");
    }

    let sortNewest = true; // Flag to track current sorting order

    const cities = [
        {name: 'Prague', lat: 50.0755, lon: 14.4378},
        {name: 'Brno', lat: 49.1951, lon: 16.6068},
        {name: 'Ostrava', lat: 49.8209, lon: 18.2625}
    ];

    const apiUrlTemplateCurrent = 'https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&current_weather=true';

    const apiUrlTemplateHistory = (lat, lon, startDate, endDate) =>
        `https://archive-api.open-meteo.com/v1/archive?latitude=${lat}&longitude=${lon}&start_date=${startDate}&end_date=${endDate}&hourly=temperature_2m`;

    async function fetchWeather() {
        document.getElementById('weather-info').innerHTML = '';
        try {
            let storedData = JSON.parse(localStorage.getItem('weatherData')); // Try to retrieve data from localStorage

            if (!storedData) {
                storedData = await fetchAndStoreData(); // If data is not available, fetch from the server and store it
            }

            displayWeatherData(storedData);
        } catch (error) {
            console.error('Error fetching weather data:', error);
        }
    }

    async function fetchAndStoreData() {
        const dataToStore = {};
        try {
            for (const city of cities) {
                const apiUrlCurrent = apiUrlTemplateCurrent.replace('{lat}', city.lat).replace('{lon}', city.lon);
                const currentWeatherResponse = await fetch(apiUrlCurrent);
                const currentWeatherData = await currentWeatherResponse.json();

                const endDate = new Date();
                const startDate = new Date();
                startDate.setDate(endDate.getDate() - 7);
                const formattedStartDate = startDate.toISOString().split('T')[0];
                const formattedEndDate = endDate.toISOString().split('T')[0];

                const apiUrlHistory = apiUrlTemplateHistory(city.lat, city.lon, formattedStartDate, formattedEndDate);
                const historyWeatherResponse = await fetch(apiUrlHistory);
                const historyWeatherData = await historyWeatherResponse.json();

                dataToStore[city.name] = {
                    currentTemperature: currentWeatherData.current_weather.temperature,
                    hourly: historyWeatherData.hourly
                };
            }
            localStorage.setItem('weatherData', JSON.stringify(dataToStore)); // Store the fetched data in localStorage
            return dataToStore;
        } catch (error) {
            console.error('Error fetching and storing weather data:', error);
            throw error; // Propagate the error to the caller
        }
    }

    function displayWeatherData(weatherData) {
        try {
            for (const city of cities) {
                const cityData = weatherData[city.name];

                let weatherHTML = `
                <div class="city-weather col-md-4 text-center mb-4">
                    <h2>${city.name}</h2>
                    <p>Current Temperature: ${cityData.currentTemperature}°C</p>
                    <p>Data:</p>
                    <ul>
            `;

                const timeArray = cityData.hourly.time;
                const temperatureArray = cityData.hourly.temperature_2m;

                if (!sortNewest) {
                    timeArray.reverse();
                    temperatureArray.reverse();
                }

                for (let i = 0; i < timeArray.length; i++) {
                    const temperature = temperatureArray[i];
                    if (temperature !== null) {
                        weatherHTML += `<li>${timeArray[i]}: ${temperature}°C</li>`;
                    }
                }

                weatherHTML += '</ul></div>';
                document.getElementById('weather-info').innerHTML += weatherHTML;
            }
            document.getElementById('last-updated').textContent = 'Last Updated: ' + new Date().toLocaleTimeString();
        } catch (error) {
            console.error('Error displaying weather data:', error);
        }
    }

    document.getElementById('refresh-data').addEventListener('click', fetchWeather);
    document.getElementById('sort-button').addEventListener('click', function () {
        sortNewest = !sortNewest; // Toggle sorting order
        fetchWeather(); // Re-fetch data and re-render
    });

    setInterval(fetchWeather, 60000);
    fetchWeather(); // Initial fetch on page load
});
